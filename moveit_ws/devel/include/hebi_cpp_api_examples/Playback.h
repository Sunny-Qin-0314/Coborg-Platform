// Generated by gencpp from file hebi_cpp_api_examples/Playback.msg
// DO NOT EDIT!


#ifndef HEBI_CPP_API_EXAMPLES_MESSAGE_PLAYBACK_H
#define HEBI_CPP_API_EXAMPLES_MESSAGE_PLAYBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hebi_cpp_api_examples
{
template <class ContainerAllocator>
struct Playback_
{
  typedef Playback_<ContainerAllocator> Type;

  Playback_()
    : name()
    , index(0)
    , mode(0)  {
    }
  Playback_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , index(0)
    , mode(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef int16_t _index_type;
  _index_type index;

   typedef int16_t _mode_type;
  _mode_type mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GO_TO_WAYPOINT)
  #undef GO_TO_WAYPOINT
#endif
#if defined(_WIN32) && defined(GO_TO_PATH_START)
  #undef GO_TO_PATH_START
#endif
#if defined(_WIN32) && defined(PLAY_PATH)
  #undef PLAY_PATH
#endif
#if defined(_WIN32) && defined(NUM_MODES)
  #undef NUM_MODES
#endif

  enum {
    GO_TO_WAYPOINT = 0,
    GO_TO_PATH_START = 1,
    PLAY_PATH = 2,
    NUM_MODES = 3,
  };


  typedef boost::shared_ptr< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> const> ConstPtr;

}; // struct Playback_

typedef ::hebi_cpp_api_examples::Playback_<std::allocator<void> > Playback;

typedef boost::shared_ptr< ::hebi_cpp_api_examples::Playback > PlaybackPtr;
typedef boost::shared_ptr< ::hebi_cpp_api_examples::Playback const> PlaybackConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hebi_cpp_api_examples::Playback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hebi_cpp_api_examples::Playback_<ContainerAllocator1> & lhs, const ::hebi_cpp_api_examples::Playback_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.index == rhs.index &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hebi_cpp_api_examples::Playback_<ContainerAllocator1> & lhs, const ::hebi_cpp_api_examples::Playback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hebi_cpp_api_examples

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15d0ac08484c4ab841188f5d622febfa";
  }

  static const char* value(const ::hebi_cpp_api_examples::Playback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15d0ac08484c4ab8ULL;
  static const uint64_t static_value2 = 0x41188f5d622febfaULL;
};

template<class ContainerAllocator>
struct DataType< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hebi_cpp_api_examples/Playback";
  }

  static const char* value(const ::hebi_cpp_api_examples::Playback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The name of the waypoint or path\n"
"string name\n"
"# If string not given, can playback by index instead\n"
"int16 index\n"
"\n"
"# Playback modes\n"
"int16 GO_TO_WAYPOINT = 0 # Go to a named or numbered waypoint\n"
"int16 GO_TO_PATH_START = 1 # Go to the start point of the path\n"
"int16 PLAY_PATH = 2 # Play path at offset & reset offset\n"
"int16 NUM_MODES = 3 # Total number of available modes; this is an invalid mode selection!\n"
"# Select playback mode\n"
"int16 mode\n"
;
  }

  static const char* value(const ::hebi_cpp_api_examples::Playback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.index);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Playback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hebi_cpp_api_examples::Playback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hebi_cpp_api_examples::Playback_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "index: ";
    Printer<int16_t>::stream(s, indent + "  ", v.index);
    s << indent << "mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEBI_CPP_API_EXAMPLES_MESSAGE_PLAYBACK_H
