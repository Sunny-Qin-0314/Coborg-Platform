// Generated by gencpp from file hebi_cpp_api_examples/OffsetPlayback.msg
// DO NOT EDIT!


#ifndef HEBI_CPP_API_EXAMPLES_MESSAGE_OFFSETPLAYBACK_H
#define HEBI_CPP_API_EXAMPLES_MESSAGE_OFFSETPLAYBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace hebi_cpp_api_examples
{
template <class ContainerAllocator>
struct OffsetPlayback_
{
  typedef OffsetPlayback_<ContainerAllocator> Type;

  OffsetPlayback_()
    : offset()  {
    }
  OffsetPlayback_(const ContainerAllocator& _alloc)
    : offset(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _offset_type;
  _offset_type offset;





  typedef boost::shared_ptr< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> const> ConstPtr;

}; // struct OffsetPlayback_

typedef ::hebi_cpp_api_examples::OffsetPlayback_<std::allocator<void> > OffsetPlayback;

typedef boost::shared_ptr< ::hebi_cpp_api_examples::OffsetPlayback > OffsetPlaybackPtr;
typedef boost::shared_ptr< ::hebi_cpp_api_examples::OffsetPlayback const> OffsetPlaybackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator1> & lhs, const ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator2> & rhs)
{
  return lhs.offset == rhs.offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator1> & lhs, const ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hebi_cpp_api_examples

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de19cca9344eb5bfedb7e55986a47f2e";
  }

  static const char* value(const ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde19cca9344eb5bfULL;
  static const uint64_t static_value2 = 0xedb7e55986a47f2eULL;
};

template<class ContainerAllocator>
struct DataType< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hebi_cpp_api_examples/OffsetPlayback";
  }

  static const char* value(const ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point offset\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OffsetPlayback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hebi_cpp_api_examples::OffsetPlayback_<ContainerAllocator>& v)
  {
    s << indent << "offset: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEBI_CPP_API_EXAMPLES_MESSAGE_OFFSETPLAYBACK_H
