;; Auto-generated. Do not edit!


(when (boundp 'hebi_cpp_api_examples::BaseMotionGoal)
  (if (not (find-package "HEBI_CPP_API_EXAMPLES"))
    (make-package "HEBI_CPP_API_EXAMPLES"))
  (shadow 'BaseMotionGoal (find-package "HEBI_CPP_API_EXAMPLES")))
(unless (find-package "HEBI_CPP_API_EXAMPLES::BASEMOTIONGOAL")
  (make-package "HEBI_CPP_API_EXAMPLES::BASEMOTIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude BaseMotionGoal.msg.html


(defclass hebi_cpp_api_examples::BaseMotionGoal
  :super ros::object
  :slots (_x _y _theta _set_color _r _g _b ))

(defmethod hebi_cpp_api_examples::BaseMotionGoal
  (:init
   (&key
    ((:x __x) 0.0)
    ((:y __y) 0.0)
    ((:theta __theta) 0.0)
    ((:set_color __set_color) nil)
    ((:r __r) 0)
    ((:g __g) 0)
    ((:b __b) 0)
    )
   (send-super :init)
   (setq _x (float __x))
   (setq _y (float __y))
   (setq _theta (float __theta))
   (setq _set_color __set_color)
   (setq _r (round __r))
   (setq _g (round __g))
   (setq _b (round __b))
   self)
  (:x
   (&optional __x)
   (if __x (setq _x __x)) _x)
  (:y
   (&optional __y)
   (if __y (setq _y __y)) _y)
  (:theta
   (&optional __theta)
   (if __theta (setq _theta __theta)) _theta)
  (:set_color
   (&optional __set_color)
   (if __set_color (setq _set_color __set_color)) _set_color)
  (:r
   (&optional __r)
   (if __r (setq _r __r)) _r)
  (:g
   (&optional __g)
   (if __g (setq _g __g)) _g)
  (:b
   (&optional __b)
   (if __b (setq _b __b)) _b)
  (:serialization-length
   ()
   (+
    ;; float64 _x
    8
    ;; float64 _y
    8
    ;; float64 _theta
    8
    ;; bool _set_color
    1
    ;; uint8 _r
    1
    ;; uint8 _g
    1
    ;; uint8 _b
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float64 _x
       (sys::poke _x (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _y
       (sys::poke _y (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _theta
       (sys::poke _theta (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; bool _set_color
       (if _set_color (write-byte -1 s) (write-byte 0 s))
     ;; uint8 _r
       (write-byte _r s)
     ;; uint8 _g
       (write-byte _g s)
     ;; uint8 _b
       (write-byte _b s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float64 _x
     (setq _x (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _y
     (setq _y (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _theta
     (setq _theta (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; bool _set_color
     (setq _set_color (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; uint8 _r
     (setq _r (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; uint8 _g
     (setq _g (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; uint8 _b
     (setq _b (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;;
   self)
  )

(setf (get hebi_cpp_api_examples::BaseMotionGoal :md5sum-) "28f4303134ac5c0340dc34500202a721")
(setf (get hebi_cpp_api_examples::BaseMotionGoal :datatype-) "hebi_cpp_api_examples/BaseMotionGoal")
(setf (get hebi_cpp_api_examples::BaseMotionGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal position (relative to start)
float64 x
float64 y
float64 theta

# Optionally, set a color when doing the move; otherwise, clear the color.
bool set_color
uint8 r
uint8 g
uint8 b

")



(provide :hebi_cpp_api_examples/BaseMotionGoal "28f4303134ac5c0340dc34500202a721")


